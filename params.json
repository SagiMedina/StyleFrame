{"name":"Styleframe","tagline":"A library that wraps pandas and openpyxl and allows easy styling of dataframes in excel","body":"# Installation:\r\n\r\n    pip install styleframe\r\n\r\n\r\n# Some usage examples\r\n\r\nStyleFrame constructor supports all the ways you are used to initiate pandas dataframe.\r\nAn existing dataframe, a dictionary or a list of dictionaries:\r\n\r\n    from StyleFrame import StyleFrame\r\n\r\n    sf = StyleFrame({'col_a': range(100)})\r\n\r\n\r\nApplying a style to rows that meet a condition using pandas selecting syntax.\r\nIn this example all the cells in the `col_a` column with the value > 50 will have\r\nblue background and a bold, sized 10 font:\r\n\r\n    sf.apply_style_by_indexes(indexes_to_style=sf[sf['col_a'] > 50],\r\n                              cols_to_style=['col_a'], bg_color='blue', bold=True, font_size=10)\r\n\r\nCreating ExcelWriter used to save the excel:\r\n\r\n    ew = StyleFrame.ExcelWriter(r'C:\\my_excel.xlsx')\r\n    sf.to_excel(ew)\r\n    ew.save()\r\n\r\nIt is also possible to style a whole column or columns, and decide whether to style the headers or not:\r\n\r\n    sf.apply_column_style(cols_to_style=['a'], bg_color='green', style_header=True)\r\n\r\n\r\n# API documentation\r\n\r\nGiven that `sf = StyleFrame(...)` :\r\n\r\n## Styling by indexes\r\n\r\n    sf.apply_style_by_indexes(indexes_to_style=None, cols_to_style=None, bg_color=colors.white,\r\n                              bold=False, font_size=12, font_color=colors.black,\r\n                              number_format=number_formats.general, protection=False)\r\n\r\nApplies a certain style to the provided indexes in the dataframe to the provided columns.\r\nParameters:\r\n\r\n    indexes_to_style: indexes to apply the style to\r\n    cols_to_style: the columns to apply the style to, if not provided all the columns will be styled\r\n    bg_color: the cell's background color to use\r\n    bold: bold or not\r\n    font_size: the font size\r\n    font_color: the font color\r\n    number_format: Excel's number format to use\r\n    protection: to protect the cell from changes or not\r\n\r\n## Styling by columns\r\n\r\n    sf.apply_column_style(cols_to_style=None, bg_color=colors.white, bold=False, font_size=12,\r\n                          font_color=colors.black, style_header=False,\r\n                          number_format=number_formats.general, protection=False)\r\n\r\nApply a style to a whole column.\r\nParameters:\r\n\r\n    cols_to_style: the columns to apply the style to\r\n    bg_color: the cell's background color to use\r\n    bold: bold or not\r\n    font_size: the font size\r\n    font_color: the font color\r\n    style_header: style the header or not\r\n    number_format: Excel's number format to use\r\n    protection: to protect the column from changes or not\r\n\r\n## Styling headers only\r\n\r\n    sf.apply_headers_style(bg_color=colors.white, bold=True, font_size=12, font_color=colors.black,\r\n                           number_format=number_formats.general, protection=False)\r\n\r\n\r\nApply style to the headers only.\r\nParameters:\r\n\r\n        bg_color: the cell's background color to use\r\n        bold: bold or not\r\n        font_size: the font size\r\n        font_color: the font color\r\n        number_format: Excel's number format to use\r\n        protection: to protect the column from changes or not\r\n\r\n\r\n## Renaming columns\r\n\r\n        sf.rename(columns=None, inplace=False)\r\n\r\nRename the underlying dataframe's columns.\r\nParameters:\r\n\r\n        columns: a dictionary, old_col_name -> new_col_name\r\n        inplace: whether to rename the columns inplace or return a new StyleFrame object\r\n        return: None if inplace=True, StyleFrame if inplace=False\r\n\r\n\r\n## Setting columns width\r\n\r\n    sf.set_column_width(columns, width)\r\n\r\nSet the width of the given columns\r\nParameters:\r\n\r\n        columns: a single or a list/tuple of column name, index or letter to change their width\r\n        width: numeric positive value of the new width\r\n\r\n\r\n    set_column_width_dict(self, col_width_dict)\r\n\r\nParameters:\r\n\r\n        col_width_dict: a dictionary from tuples of columns to the desired width\r\n\r\n\r\n## Setting rows height\r\n\r\n    sf.set_row_height(rows, height)\r\n\r\n\r\nSet the height of the given rows.\r\nParameters:\r\n\r\n        rows: a single row index, list of indexes or tuple of indexes to change their height\r\n        height: numeric positive value of the new height\r\n\r\n\r\n    sf.set_column_width_dict(self, col_width_dict)\r\n\r\nParameters:\r\n\r\n    sf.set_row_height_dict: a dictionary from tuples of rows to the desired height\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}